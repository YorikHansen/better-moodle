@use 'sass:math';
@use 'sass:string';

:local(#open-settings-btn) {
    /* if settings modal is not ready yet, settings btn should be in a loading state */
    &.loading {
        opacity: 0.5;
    }

    .tooltip:has(:local(.new-setting-badge)) {
        z-index: 1035;
        cursor: pointer;
    }
}

.modal-content:has(:local(#settings-form)) {
    .modal-header {
        align-items: center;

        h5 {
            ~ :not(div:has(input)) {
                /* all elements in settings header except should have consistent padding and margin */
                padding: 1rem;
                margin: -0.8rem -0.8rem -0.8rem 0;
            }

            ~ :not(button.close) {
                /* use small font size but not for the button in settings header */
                font-size: small;
            }

            ~ div:has(input) {
                padding: 0;
                margin-bottom: 0;

                > input {
                    $width: 16px;
                    $unitless-width: math.div($width, 1px);
                    $padding: 0.5em;

                    /* Uhhh, a SVG as a background image */
                    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='#{$unitless-width}' height='22'%3E%3Ctext class='fa' x='0' y='11' dominant-baseline='middle' fill='grey'%3Eï€‚%3C/text%3E%3C/svg%3E");
                    background-repeat: no-repeat;
                    background-size: 1em;
                    background-position-y: center;
                    background-position-x: $padding;
                    padding-right: $padding;
                    padding-left: calc($padding + $width);
                }
            }

            @media (max-width: 991.8px) {
                flex-basis: 100%;
                flex-shrink: 1;

                ~ div > input {
                    &:not(:focus) {
                        max-width: 0;
                        padding-right: 0;
                        background-position: center;
                    }

                    &:focus {
                        position: absolute;
                        left: 0;
                        top: 0;
                    }
                }
            }
        }
    }

    :local(#support-wrapper) {
        top: 0.5rem;
        right: 0.5rem;

        @media (max-width: 991.98px) {
            position: unset !important;

            > span {
                padding: 0.25rem 0.5rem;
                text-align: center;
            }
        }

        @media (min-width: 992px) {
            > span {
                margin-left: 0.5rem;
                margin-right: 0.5rem;

                &:last-of-type {
                    margin-bottom: 0.25rem;
                }
            }
        }
    }

    .fitem {
        &:has(input[disabled], select[disabled]) {
            .col-form-label label {
                /* disabled settings should have a grayed out label (similar to text-muted class) */
                color: var(--gray);
            }

            :local(.hide-disabled-settings) & {
                /* hide disabled settings if the user prefers */
                display: none;
            }
        }

        :local(.new-setting-badge) {
            /* "New!"-Badges should not be cuddling with the label text! */
            margin-right: 1ch;
        }
    }

    fieldset {
        .ftoggler h3 :local(.new-setting-badge) {
            /* "New!"-Badges should not be cuddling with the featureGroup name! */
            margin-left: 1ch;
        }

        &:not(:has(.fcontainer :local(.new-setting-badge))) {
            .ftoggler h3 :local(.new-setting-badge) {
                /* Hide the "New!"-Badge of a featureGroup if there are no new settings in this group anymore */
                display: none;
            }
        }
    }

    :local(.hide-new-setting-badges) :local(.new-setting-badge) {
        /* Hide the "New!"-Badges if the user prefers */
        display: none !important;
    }

    $tags: [ 'fun'];
    @each $tag in $tags {
        :local(.hide-#{$tag}-settings) & .fitem[data-tags*='#{$tag}'] {
            /* hide settings with tag #{$tag} if the user prefers */
            display: none;
        }
    }

    :local(#settings-footer-btns) > :where(button, a) {
        /* some special style needed for the settings modal footer: show button text only on hover */
        > span {
            font-size: 0;
            transition: font-size 0.5s;
        }

        &:hover > span {
            font-size: unset;
        }
    }
}
